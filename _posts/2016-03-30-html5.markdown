---
layout: post
title:  "HTML5 阅读笔记"
categories: jekyll update
tags: html5
---
## doctype
doctype的存在是用于验证器检验格式类型，一般不会影响到浏览器；
在文档中加入doctype时，就相当于声明了使用标准模式，这不是发明doctype本意，只是为了达到特殊的目的在利用doctype；

### 指定文档的字符编码
    <meta charset="UTF-8"/>

## 使用link链接样式表
    <link rel="stylesheet" href="xxxx.css"/>

## 给多内容添加相同链接
    <a href="#">
        <h1>标题</h1>
        <p>段落</p>
        <img/>
    </a>

## 使用type属性增强表单
    <input type="number"/>
    <input type="search"/>
    <input type="range"/>
    <input type="email"/>
    <input type="data"/>
    <input type="url"/>

**说明**：不能认识新的type属性值的浏览器会自动将其识别为text；新增属性placeholder(占位符)

## 在HTML5中元素的3种类型的标记
 - **不允许写结束标记的元素**：br、hr、img、input、link、meta、area、base、col、command、embed、keygen、param、source、track、wbr
 - **可以省略结束标记的元素**：tr、td、th、li、dt、dd、p、option、rt、rp、optgroup、colgroup、thead、tbody、tfoot
 - **可以省略全部标记的元素**：html、head、body、colgroup、tbody

## 具有布尔值的属性
    <!--只写属性，不写属性值，代表属性值为true-->
        <input type="checkbox" checked/>
    <!--不写属性，代表属性值为false-->
        <input type="checkbox"/>
    <!--属性值=属性名，代表属性值为true-->
        <input type="checkbox" checked="checked"/>
    <!--属性值=空字符串，代表属性值为true-->
        <input type="checkbox" checked=""/>

**说明**：HTML5中，属性值两边既可以使用双引号，也可以使用单引号，还可以在没有特殊字符的情况下省略引号。

## HTML5新增的结构元素
    | 元素名称 | 说明 |
    | ----- | ---- |
    | header | 标记头部区域的内容 |
    | footer | 标记脚步区域的内容 |
    | section | web页面中的一块区域 |
    | article | 独立的文章内容 |
    | aside | 相关内容或者引文 |
    | nav | 导航类辅助内容 |

## HTML5新增功能元素
**hgroup**元素:用于对整个页面或页面中一个内容区块的标题进行组合。例如：

    <hgroup>...</hrgoup>

在HTML4中表示为：

    <div>....</div>

**figure**元素：表示一段独立的流内容，一般表示文档主体流内容中的一个独立单元。使用**figcaption**元素组添加标题。

    <figure>
        <figcaption>标题</figcaption>
        <p>内容</p>
    </figure>

HTML4中表示为：

    <dl>
        <h1>标题</h1>
        <p>内容</p>
    </dl>

**video**元素：定义视频，比如电影片段或其他视频流。例如：

    <video src="movie.ogg" controls>video元素</video>

HTML4中表示为：

    <object type="video/ogg" data="movie.ogv">
        <param name="src" value="movie.ogv"/>
    </object>

**audio**元素：定义音频，例如音乐或其他音频流。例如：

    <vaudio src="someaudio.wav">audio 元素</audio>

HTML4中表示为：

    <object type="application/ogg" data="someaudio.wav">
        <param name="src" value="someaudio.wav"/>
    </object>

**embed**元素：用来插入各种多媒体，格式可以是MIDI、WAV、AIFF、AU、MP3等。例如：

    <vaudio src="horse.wav"/>

HTML4中表示为：

    <object type="application/x-shockwave-flash" data="flash.swf">
    </object>

**mark**元素：主要用来在视觉上向用户呈现那些需要突出显示或者高亮显示的文字。mark元素比较典型的应用就是在搜索结果中向用户显示搜索关键字。例如：

    <mark></mark>

HTML4中表示为：

    <span></span>

**time**元素：表示时间或日期，也可以同时表示两者。例如：

    <time></time>

HTML4中表示为：

    <span></span>

**canvas**元素：表示图形，如图表和其他图像。这个元素本身没有行为，仅提供一张画布，但它把一个绘图API展现给用户端Javascript，以便脚本把想绘制的图形绘制到这张画布上。例如：

    <canvas id="myCanvas" width="300" height="200"></canvas>

**output**元素：表示不同类型的输出，比如脚本的输出。例如：

    <output></output>

HTML4中表示为：

    <span></span>

**source**元素：为媒介元素(比如\<video\>和\<audio\>)定义媒介资源。例如：

    <source>

HTML4中表示为：

    <param>

**menu**元素：表示菜单列表，当希望列出表单控件时使用该标签。例如：

    <menu>
        <li><input type="checkbox"/>Red</li>
        <li><input type="checkbox"/>Blue</li>
    </menu>

在HTML4中menu元素不推荐使用。

**ruby**元素：表示ruby注释(中文注音或字符).

**rt**元素：表示字符(中文注音或字符)的解释或发音。

**rp**元素：在ruby注释中使用，以定义不支持ruby元素的浏览器所显示的内容。

**wbr**元素：表示软换行。br元素表示此处必须换行，而wbr元素是浏览器窗口或父级元素的宽度足够宽时(没必要换行时)不进行换行，而当宽度不够时，主动在此处进行换行。

**details**元素：表示用户要求得到并且可以得到的细节信息，可以与summary元素配合使用。

**sarmmary**元素：提供标题或图例。标题是可见的，用户单击标题时，会显示出细节信息。summary元素应该是details元素的第一个子元素。例如：

    <details>
        <summary>HTML5</summary>
         For hhohdbuifbui fusbf fuifbaf hfosfs ufs ihne  ebu   baba  duf sdf fhi .
    </details>

**datalist**元素：表示可选数据的列表，配合input元素使用，可以制作出输入值的下拉列表。

## 与类相关的扩充

**getElementsByClassName()方法**：该方法接收一个参数，即一个包含一或多个类名的字符串，返回带有指定类的所有元素的NodeList。通过document对象及所有HTML元素调用该方法。

    //获取所有类中包含“username”和“current”的元素
    var allCurrentUsername = document.getElementsByClassName('username current');

注：支持getElementsByClassName()方法的浏览器有IE9+、Firefox3+、Safari3.1+、chrome和opera9.5+。

**classList属性**：HTML5为所有元素添加了classList属性，该属性是新集合类型DOMTokenList的实例。与其他DOM集合类似，DOMTokenList有一个表示自己包含多少元素的length属性，而要取得每个元素也可以使用item()方法，也可以使用方括号语法。此外，这个类型还定义如下方法：

- **add(value)**：将给定的字符串值添加到列表中。如果该值已经存在，就不添加。
- **remove(value)**：从列表中删除给定的字符串值。
- **contains(value)**：表示列表中是否存在给定的字符串值。如果有返回true，没有返回false。
- **toggle(value)**：如果列表中已经存在给定的字符串值，就删除它，如果列表中没有给定的字符串值，就添加它。

      //删除“disabled”类
      div.classList.remove('disabled');
      //添加“current”类
      div.classList.add('current');

### 焦点管理

**activeElement属性**：这个属性始终会引用DOM中当前获得了焦点的元素。

    var button = document.getElementById('myButton');
    button.focus();
    alert(document.activeElement === button); //true

注：默认情况下，文档刚刚加载完，document.activeElement中保存的是document.body元素的引用。文档加载期间，document.activeElement的值为null。

**hasFocus()方法**：该方法用于确定文档是否获得了焦点。

    var button = document.getElementById('myButton');
    button.focus();
    alert(button.hasFocus()); //true

注：实现了焦点管理这两个元素的浏览器包括：IE4+、Firefox3+、Safari4+、chrome和opera8+。

### HTMLDocument 的变化

**readyState属性**：document.readyState属性有两个可能值：loading（正在加载文档）和complete（已经加载完文档）。使用该属性的最恰当方式，就是通过它来实现一个指令文档已经加载和完成的指示器。在这个属性得到广泛支持之前，要实现这样一个指示器，必须借助onload事件处理程序设置一个标签。

    if(document.readyState == 'complete'){
        //执行操作
    }

    window.onload(function(){
        //执行操作
    });


注：支持readyState属性的浏览器有IE4+、Firefox3.6+、Safari、chrome和opera9+。

**compatMode属性**：获取页面的渲染模式。在标准模式下，document.compatMode的值等于“CSS1Compat”，而在混杂模式下，document.compatMode的值等于“BackCompat”.

    if(document.compatMode == 'CSS1Compat'){
        alert('Standards mode');
    }else {
        alert('Quirks mode');
    }

注：支持该属性的浏览器有IE6+、Firefox、Safari3.1+、opera和chrome。

**head属性**：引用文档的<head>元素。

    var head = document.head || document.getElementsByTagName('head')[0];

注：实现document.head属性的浏览器包括chrome和Safari 5.

### 字符集属性

**charset属性**：获取文档实际使用的字符集，也可以用来指定新字符集。

    alert(document.charset); //"UTF-16"
    document.charset = 'UTF-8';

**defaultCharset属性**：获取文档默认的字符集。

通过这两个属性可以得到文档使用的字符编码的具体信息，可能对字符编码进行准确的控制。

支持document.charset的浏览器有IE、Safari、opera和chrome。Firefox支持document.Characterset.支持document.defaultCharset属性的浏览器有chrome、IE和Safari。

**data-**：HTML5规定可以添加前缀data-的自定义属性。添加自定义属性后，可以通过元素的dataset属性来访问自定义的属性的值.dataset属性是DOMStringMap的一个实例。也就是一个名值对的映射。

    //HTML代码
    <div id='myDiv' data-lang='zh-CN'></div>
    //js代码
    var div = document.getElementById('myDiv');
    //获取自定义的属性
    div.dataset; //{lang: 'zh-CN'}

dataset获取自定义属性得到的值对中，属性名没有前缀data-。
支持dataset属性的浏览器有IE11+、Safari9+、firefox、chrome和opera。

### 插入标记

**innerHTML属性**：在读模式下。innerHTML属性返回与调用元素的所有子节点（包括注释、元素和文本节点）对应的HTML标记。在写模式下，innerHTML元素会根据指定的值创建新的DOM树，然后用这个DOM树替换调用元素原有的所有子节点。

    //HTML代码
    <div id='myDiv'>
        <p>This is a <strong>paragraph</strong> with a list following it.</p>
        <ul>
            <li>Item 1</li>
            <li>Item 2</li>
            <li>Item 3</li>
        </ul>
    </div>
    //获取div的innerHTML
    var div = document.getElementById('myDiv');
    div.innerHTML;
    /*返回的字符串为：
    <p>This is a <strong>paragraph</strong> with a list following it.</p>
    <ul>
        <li>Item 1</li>
        <li>Item 2</li>
        <li>Item 3</li>
    </ul>
    */
    //修改div的所有子节点
    div.innerHTML = 'Hello & Welcome,<b>"reader"</b>';
    div.innerHTML; // Hello &amp Welcome,<b>"reader"</b>
    div.innerHTML = "Hello & Welcome,<b>\"reader\"</b>";
    div.innerHTML; // Hello &amp Welcome,<b>"reader"</b>

不同浏览器使用innerHTML属性返回调用元素的所有子元素有所不同。IE和Opera会将所有标签转换为大写形式。而Safari、Chrome和Firefox则会按照原先文档中（或指定这些标签时）的格式返回HTML，包括空格和 缩进。
使用innerHTML属性设置调用元素的子节点时，注意设置值字符串中特殊字符的转移。如果设置的字符串开头是一个“无作用于的元素”（在页面中看不到的元素），这个字符串会变成空字符串

    div.innerHTML = '<script>alert('This is a test!');</script>';
    div.innerHTML; // null

**outerHTML属性**：在读模式下，该属性返回调用元素及所有的子节点的HTML标签。在写模式下，该元素根据指定的HTML字符串创建新的DOM子树，然后用这个DOM子树完全替换调用元素。

    //HTML代码
    <div id="content">
        <p>This is a <strong>paragraph</strong></p>
    </div>
    //js代码
    var div = document.getElementById('content');
    div.outerHTML; //返回和HTML代码相同的内容，包括div标签
    div.outerHTML = '<p>This is a paragraph!<p>';
    //执行了outerHTML属性写入值，结果就是新创建的元素会取代DOM树中<div>元素。如同执行了下面这样的代码：
    var p = document.createElement('p');
    p.appendChild(document.createTextNode('This is a paragraph!'));
    div.replaceChild(p,div);

支持outerHTML属性的浏览器有IE4+、Safari4+、chrome和opera8+。

**insertAdjacentHTML()方法**：该方法接收两个参数：插入位置和要插入的HTML文本。第一个参数必须是下列值之一：

- **beforebegin**：在当前元素之前插入一个同辈元素；
- **afterbegin**：在当前元素之后插入一个同辈元素；
- **beforeend**：在当前元素之下插入一个新的子元素作为该元素的一个新的lastChild；
- **afterend**：在当前元素之下插入一个新的子元素作为该元素的一个新的firstChild；

      //作为前一个同辈元素插入
      div.insertAdjacentHTML('beforebegin','<p>hello world</p>');
      //作为后一个同辈元素插入
      div.insetAdjacentHTML('afterbegin','<p>hello world</p>');
      //作为新的lastChild插入
      div.insertAdjacentHTML('beforeend','<p>hello world</p>');
      //作为新的firstChild插入
      div.insertAdjacentHTML('afterend','<p>hello world</p>');

支持insertAdjacentHTML方法的浏览器有IE、Firefox8+、Safari、opera和chrome。

**注**：使用上述插入标记替换子节点可能会导致浏览器的内存占用问题。在删除带有事件处理或引用了其他JavaScript对象子树时，就有可能导致内存占用问题。假设某个元素有一个事件处理程序（或引用了一个js对象作为属性），在使用前述某个属性将该元素从文档树中删除后，元素与事件处理程序（或js对象）之间的绑定关系在内存中并没有一并删除。如果这样的情况频繁出现，页面占用的内存数量就会频繁增加。因此，在调用innerHTML、outerHTML属性和insertAdjacentHTML()方法时，最好先手动删除要被替换的元素的所有事件处理程序和js对象属性。

**scrollIntoView()方法**：该方法可以再所有元素上调用，通过滚动浏览器窗口或某个容器元素，调用元素就可以出现在视口中。如果给该元素传入true作为参数，或者不传入参数，那么滚动窗口之后会让调用元素的顶部与视口顶部尽可能平齐。如果传入false作为参数。调用元素会尽可能全部出现在视口中，（可能的话，调用元素的底部会与视口顶部平齐）